"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorldStateDb = void 0;
const fifo_1 = require("../fifo");
const fs_extra_1 = require("fs-extra");
const merkle_tree_1 = require("../merkle_tree");
const bigint_buffer_1 = require("bigint-buffer");
const child_process_1 = require("child_process");
const promise_readable_1 = require("promise-readable");
const serialize_1 = require("../serialize");
class WorldStateDb {
  constructor(dbPath = "./data/world_state.db") {
    this.dbPath = dbPath;
    this.stdioQueue = new fifo_1.MemoryFifo();
    this.roots = [];
    this.sizes = [];
    this.binPath = "./barretenberg.js/db_cli/db_cli";
  }
  async start() {
    await this.launch();
    this.processStdioQueue();
  }
  stop() {
    this.stdioQueue.cancel();
    if (this.proc) {
      this.proc.kill("SIGINT");
    }
  }
  getRoot(treeId) {
    return this.roots[treeId];
  }
  getSize(treeId) {
    return this.sizes[treeId];
  }
  async get(treeId, index) {
    return new Promise((resolve) =>
      this.stdioQueue.put(async () => resolve(await this.get_(treeId, index)))
    );
  }
  async get_(treeId, index) {
    const buffer = Buffer.concat([
      Buffer.alloc(1, 0),
      Buffer.alloc(1, treeId),
      bigint_buffer_1.toBufferBE(index, 32),
    ]);
    this.proc.stdin.write(buffer);
    const lengthBuf = await this.stdout.read(4);
    if (!lengthBuf) {
      throw new Error("Failed to read length.");
    }
    const length = lengthBuf.readUInt32BE(0);
    const result = await this.stdout.read(length);
    return result;
  }
  async getHashPath(treeId, index) {
    return new Promise((resolve) =>
      this.stdioQueue.put(async () =>
        resolve(await this.getHashPath_(treeId, index))
      )
    );
  }
  async getHashPath_(treeId, index) {
    const buffer = Buffer.concat([
      Buffer.alloc(1, 4),
      Buffer.alloc(1, treeId),
      bigint_buffer_1.toBufferBE(index, 32),
    ]);
    this.proc.stdin.write(buffer);
    const depth = (await this.stdout.read(4)).readUInt32BE(0);
    const result = await this.stdout.read(depth * 64);
    const path = new merkle_tree_1.HashPath();
    for (let i = 0; i < depth; ++i) {
      const lhs = result.slice(i * 64, i * 64 + 32);
      const rhs = result.slice(i * 64 + 32, i * 64 + 64);
      path.data.push([lhs, rhs]);
    }
    return path;
  }
  async put(treeId, index, value) {
    return new Promise((resolve) =>
      this.stdioQueue.put(async () =>
        resolve(await this.put_(treeId, index, value))
      )
    );
  }
  async put_(treeId, index, value) {
    const buffer = Buffer.concat([
      Buffer.alloc(1, 1),
      Buffer.alloc(1, treeId),
      bigint_buffer_1.toBufferBE(index, 32),
      serialize_1.serializeBufferToVector(value),
    ]);
    this.proc.stdin.write(buffer);
    this.roots[treeId] = await this.stdout.read(32);
    if (index + BigInt(1) > this.sizes[treeId]) {
      this.sizes[treeId] = index + BigInt(1);
    }
    return this.roots[treeId];
  }
  async batchPut(entries) {
    return new Promise((resolve) =>
      this.stdioQueue.put(async () => resolve(await this.batchPut_(entries)))
    );
  }
  async batchPut_(entries) {
    const bufs = entries.map((e) =>
      Buffer.concat([
        Buffer.alloc(1, e.treeId),
        bigint_buffer_1.toBufferBE(e.index, 32),
        serialize_1.serializeBufferToVector(e.value),
      ])
    );
    const buffer = Buffer.concat([
      Buffer.alloc(1, 5),
      serialize_1.serializeBufferArrayToVector(bufs),
    ]);
    this.proc.stdin.write(buffer);
    await this.readMetadata();
  }
  async commit() {
    await new Promise((resolve) => {
      this.stdioQueue.put(async () => {
        const buffer = Buffer.from([0x02]);
        this.proc.stdin.write(buffer);
        await this.readMetadata();
        resolve();
      });
    });
  }
  async rollback() {
    await new Promise((resolve) => {
      this.stdioQueue.put(async () => {
        const buffer = Buffer.from([0x03]);
        this.proc.stdin.write(buffer);
        await this.readMetadata();
        resolve();
      });
    });
  }
  destroy() {
    child_process_1.execSync(`${this.binPath} reset ${this.dbPath}`);
  }
  async launch() {
    await fs_extra_1.mkdirp("./data");
    const proc = (this.proc = child_process_1.spawn(this.binPath, [
      this.dbPath,
    ]));
    proc.stderr.on("data", () => {});
    proc.on("close", (code) => {
      this.proc = undefined;
      if (code) {
        console.log(`db_cli exited with unexpected code ${code}.`);
        // Should never happen, so process termination is the only sensible response.
        process.exit(1);
      }
    });
    proc.on("error", console.log);
    this.stdout = new promise_readable_1.PromiseReadable(this.proc.stdout);
    await this.readMetadata();
  }
  async readMetadata() {
    this.roots[0] = await this.stdout.read(32);
    this.roots[1] = await this.stdout.read(32);
    this.roots[2] = await this.stdout.read(32);
    const dataSize = await this.stdout.read(32);
    const nullifierSize = await this.stdout.read(32);
    const rootSize = await this.stdout.read(32);
    this.sizes[0] = bigint_buffer_1.toBigIntBE(dataSize);
    this.sizes[1] = bigint_buffer_1.toBigIntBE(nullifierSize);
    this.sizes[2] = bigint_buffer_1.toBigIntBE(rootSize);
  }
  async processStdioQueue() {
    while (true) {
      const fn = await this.stdioQueue.get();
      if (!fn) {
        break;
      }
      await fn();
    }
  }
}
exports.WorldStateDb = WorldStateDb;
//# sourceMappingURL=data:application/json;base64,
