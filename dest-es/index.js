import 'module-alias/register'; // ðŸ‘ˆ add this one
import { EthAddress } from './../barretenberg.js/address';
import { WorldStateDb } from './../barretenberg.js/world_state_db';
import { EthereumBlockchain, EthersAdapter } from './../blockchain';
import { ethers } from 'ethers';
import http from 'http';
import 'reflect-metadata';
import { appFactory } from './app';
import Server from './server';
import 'log-timestamp';
import { emptyDir, mkdirp, pathExists, readJson, writeJson } from 'fs-extra';
const { PORT = '8082', ROLLUP_CONTRACT_ADDRESS = "0x737901bea3eeb88459df9ef1BE8fF3Ae1B42A2ba", ETHEREUM_HOST = 'http://localhost:8545', API_PREFIX = '', INFURA_API_KEY, NETWORK, MIN_CONFIRMATION_ESCAPE_HATCH_WINDOW, } = process.env;
function getEthereumBlockchainConfig() {
    const minConfirmationEHW = MIN_CONFIRMATION_ESCAPE_HATCH_WINDOW ? +MIN_CONFIRMATION_ESCAPE_HATCH_WINDOW : undefined;
    if (INFURA_API_KEY && NETWORK && ROLLUP_CONTRACT_ADDRESS) {
        console.log(`Infura network: ${NETWORK}`);
        console.log(`Rollup contract address: ${ROLLUP_CONTRACT_ADDRESS}`);
        const provider = new EthersAdapter(new ethers.providers.InfuraProvider(NETWORK, INFURA_API_KEY));
        const ethConfig = { minConfirmationEHW };
        return { provider, ethConfig };
    }
    else if (ETHEREUM_HOST && ROLLUP_CONTRACT_ADDRESS) {
        console.log(`Ethereum host: ${ETHEREUM_HOST}`);
        console.log(`Rollup contract address: ${ROLLUP_CONTRACT_ADDRESS}`);
        const provider = new EthersAdapter(new ethers.providers.JsonRpcProvider(ETHEREUM_HOST));
        const ethConfig = { minConfirmationEHW };
        return { provider, ethConfig };
    }
    throw new Error('Config incorrect');
}
async function checkState() {
    if (await pathExists('./data/state')) {
        const { rollupContractAddress: storedRollupAddress } = await readJson('./data/state');
        // Erase all data if rollup contract changes.
        if (storedRollupAddress !== ROLLUP_CONTRACT_ADDRESS) {
            console.log(`Rollup contract changed, erasing data: ${storedRollupAddress} -> ${ROLLUP_CONTRACT_ADDRESS}`);
            await emptyDir('./data');
        }
    }
    await mkdirp('./data');
    await writeJson('./data/state', { rollupContractAddress: ROLLUP_CONTRACT_ADDRESS });
}
async function main() {
    await checkState();
    const shutdown = async () => process.exit(0);
    process.once('SIGINT', shutdown);
    process.once('SIGTERM', shutdown);
    const worldStateDb = new WorldStateDb();
    const { provider, ethConfig } = getEthereumBlockchainConfig();
    if (!ethConfig) {
        throw new Error('No ethereum config.');
    }
    const ethereumBlockchain = await EthereumBlockchain.new(ethConfig, EthAddress.fromString(ROLLUP_CONTRACT_ADDRESS), [], provider);
    const server = new Server(worldStateDb, ethereumBlockchain);
    const app = appFactory(server, API_PREFIX);
    const httpServer = http.createServer(app.callback());
    httpServer.listen(PORT);
    console.log(`Server listening on port ${PORT}.`);
    await server.start();
}
main().catch(console.log);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyx1QkFBdUIsQ0FBQyxDQUFDLGtCQUFrQjtBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDbkMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTdFLE1BQU0sRUFDSixJQUFJLEdBQUcsTUFBTSxFQUNiLHVCQUF1QixHQUFHLDRDQUE0QyxFQUN0RSxhQUFhLEdBQUcsdUJBQXVCLEVBQ3ZDLFVBQVUsR0FBRyxFQUFFLEVBQ2YsY0FBYyxFQUNkLE9BQU8sRUFDUCxvQ0FBb0MsR0FDckMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRWhCLFNBQVMsMkJBQTJCO0lBQ2xDLE1BQU0sa0JBQWtCLEdBQUcsb0NBQW9DLENBQUMsQ0FBQyxDQUFDLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNwSCxJQUFJLGNBQWMsSUFBSSxPQUFPLElBQUksdUJBQXVCLEVBQUU7UUFDeEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0Qix1QkFBdUIsRUFBRSxDQUFDLENBQUM7UUFDbkUsTUFBTSxRQUFRLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNqRyxNQUFNLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLENBQUM7UUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztLQUNoQztTQUFNLElBQUksYUFBYSxJQUFJLHVCQUF1QixFQUFFO1FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN4RixNQUFNLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLENBQUM7UUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQztLQUNoQztJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsS0FBSyxVQUFVLFVBQVU7SUFDdkIsSUFBSSxNQUFNLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUNwQyxNQUFNLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV0Riw2Q0FBNkM7UUFDN0MsSUFBSSxtQkFBbUIsS0FBSyx1QkFBdUIsRUFBRTtZQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxtQkFBbUIsT0FBTyx1QkFBdUIsRUFBRSxDQUFDLENBQUM7WUFDM0csTUFBTSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDMUI7S0FDRjtJQUVELE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLHFCQUFxQixFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztBQUN0RixDQUFDO0FBRUQsS0FBSyxVQUFVLElBQUk7SUFDakIsTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUVuQixNQUFNLFFBQVEsR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUN4QyxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLDJCQUEyQixFQUFFLENBQUM7SUFFOUQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUN4QztJQUVELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxHQUFHLENBQ3JELFNBQVMsRUFDVCxVQUFVLENBQUMsVUFBVSxDQUFDLHVCQUF3QixDQUFDLEVBQy9DLEVBQUUsRUFDRixRQUFRLENBQ1QsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzVELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFM0MsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNyRCxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLElBQUksR0FBRyxDQUFDLENBQUM7SUFFakQsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDdkIsQ0FBQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMifQ==